#ifndef QTVIEWER_H
#define QTVIEWER_H
#include <QApplication>
#include <QGuiApplication>
#include <QMap>
#include <QMatrix4x4>
#include <QOpenGLContext>
#include <QOpenGLFramebufferObject>
#include <QOpenGLFunctions>
#include <QQmlApplicationEngine>
#include <QQmlContext>
#include <QQmlContext>
#include <QQuickItem>
#include <QQuickView>
#include <chrono>
#include <functional>
#include <iostream>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
#include "arrowsgroup.hpp"
#include "blur.hpp"
#include "button.hpp"
#include "camera.hpp"
#include "cellgroup.hpp"
#include "connectionsgroup.hpp"
#include "deformableCellGroup.hpp"
#include "gridviewer.hpp"
#include "keyboardmanager.hpp"
#include "mousemanager.hpp"
#include "msaa.hpp"
#include "paintstep.hpp"
#include "plugins.hpp"
#include "screencapture.hpp"
#include "screenmanager.hpp"
#include "signalslotbase.h"
#include "skybox.hpp"
#include "ssao.hpp"
#include "viewtools.h"

#define MECACELL_VIEWER
#include "macros.h"

using namespace std;
namespace MecacellViewer {
template <typename Scenario> class Viewer : public SignalSlotRenderer {
	friend class SignalSlotBase;

 public:
	using World =
	    typename remove_reference<decltype(((Scenario *)nullptr)->getWorld())>::type;
	using Cell = typename World::cell_t;
	using Vec = decltype(((Cell *)nullptr)->getPosition());
	using R = Viewer<Scenario>;
	using Rfunc = std::function<void(R *)>;
	using ButtonType = Button<R>;

	Viewer(int c, char **v) : argc(c), argv(v) {
#if __APPLE__
#include "TargetConditionals.h"
#if TARGET_OS_MAC
		// compatibility profile (Qt's default) is not available on mac os...
		// we have to use a core profile
		QSurfaceFormat f;
		f.setProfile(QSurfaceFormat::CoreProfile);
		f.setVersion(3, 3);
		f.setAlphaBufferSize(8);
		f.setRenderableType(QSurfaceFormat::OpenGL);
		QSurfaceFormat::setDefaultFormat(f);
#endif
#endif
		registerPlugin(km);
		registerPlugin(mm);
	};
	// default "plugins"
	KeyboardManager km;
	MouseManager mm;

	int argc;
	char **argv;
	Scenario scenario;
	int frame = 0;
	int nbLoopsPerFrame = 1;

	// Visual elements & config
	Camera camera;
	float screenScaleCoef = 1.0;
	bool fullscreenMode = false;
	unsigned long leftMenuSize = 200;
	QOpenGLFramebufferObject *currentFBO = nullptr;
	QSize viewportSize;
	QMatrix4x4 viewMatrix, projectionMatrix;

	// Events
	int mouseWheel = 0;
	QPointF mousePosition, mousePrevPosition;
	QFlags<Qt::MouseButtons> mouseClickedButtons, mouseDblClickedButtons,
	    mousePressedButtons;
	std::set<Qt::Key> keyDown, keyPress;

	// Stats
	std::chrono::time_point<std::chrono::high_resolution_clock> t0, tfps;
	double viewDt;
	int nbFramesSinceLastTick = 0;
	unsigned long currentFrameNumber = 0;
	Cell *selectedCell = nullptr;
	bool worldUpdate = false;
	bool loopStep = false;
	double fpsRefreshRate = 0.4;
	QVariantMap guiCtrl, stats;
	QList<QVariant> enabledPaintSteps;
	std::vector<std::pair<QList<QVariant>, bool>> displayMenuToggled;

	MenuElement<R> displayMenu;
	bool displayMenuChanged = true;

 public:
	std::vector<Rfunc> plugins_preLoad;
	std::vector<Rfunc> plugins_onLoad;
	std::vector<Rfunc> plugins_preLoop;
	std::vector<Rfunc> plugins_preDraw;
	std::vector<Rfunc> plugins_postDraw;
	std::vector<Rfunc> plugins_onSync;

 private:
	std::map<Qt::Key, Rfunc> keyDownMethods;
	std::map<Qt::Key, Rfunc> keyPressMethods;
	std::map<Qt::MouseButton, Rfunc> mouseDragMethods;
	std::map<Qt::MouseButton, Rfunc> mouseClickMethods;
	std::map<QString, Button<R>> buttons;

	// this is just so we can store paint steps instances without making a mess
	std::map<QString, unique_ptr<PaintStep<R>>> paintSteps;

	// the actual paint steps method to be called
	std::map<int, Rfunc> paintStepsMethods;

	bool paintStepsNeedsUpdate =
	    true;  // do we need to refresh the list of checkable paint steps?

	// screen managers might affect the display. Usually manipulate fbos
	// Inherit from paintStep because they also usually need to be called
	// during painting. Ex: screen space ambient oclusion defines some fbos,
	// makes operations on them and draw an object (a texture) to the screen.
	std::vector<ScreenManager<R> *> screenManagers;

	// init function for the renderer. Create all the defaults paint steps and
	// screen managers, initializes scenario and users additions.
	using psptr = std::unique_ptr<PaintStep<R>>;
	virtual void initialize(QQuickWindow *wdw) {
		MenuElement<R> cellsMenu = {
		    "Cells",
		    {{"Mesh type",
		      elementType::exclusiveGroup,
		      {{"None", false},
		       {"Centers only", false},
		       {"Sphere", false},
		       {"Deformable mesh", true}}},
		     {"Colors", elementType::exclusiveGroup, {{"Normal", true}, {"Pressure", false}}},
		     {"Display forces", false},
		     {"Display connections", false},
		     {"Display basis", false},
		     {"Display velocities", false}}};

		this->window = wdw;
		viewportSize = QSize(static_cast<int>(wdw->width()), static_cast<int>(wdw->height()));
		scenario.init(argc, argv);
		GL = QOpenGLContext::currentContext()->functions();
		GL->initializeOpenGLFunctions();
		////////////////////////////////
		// list of default paint steps
		/////////////////////////////////
		paintSteps.emplace("MSAA", psptr(new MSAA<R>(this)));
		paintSteps.emplace("Skybox", psptr(new Skybox<R>()));
		paintSteps.emplace("DeformableCells", psptr(new DeformableCellGroup<R>()));
		paintSteps.emplace("SphereCells", psptr(new CellGroup<R>()));
		paintSteps.emplace("Arrows", psptr(new ArrowsGroup<R>()));
		paintSteps.emplace("Connections", psptr(new ConnectionsGroup<R>()));
		paintSteps.emplace(
		    "Grids", psptr(new GridViewer<R>(":shaders/mvp.vert", ":/shaders/flat.frag")));
		paintSteps.emplace("SSAO", psptr(new SSAO<R>(this)));
		paintSteps.emplace("Blur", psptr(new MenuBlur<R>(this)));
		paintSteps.emplace("ScreenCapture", psptr(new MenuScreenCapture<R>(this)));
		screenManagers.push_back(dynamic_cast<ScreenManager<R> *>(paintSteps["MSAA"].get()));
		screenManagers.push_back(dynamic_cast<ScreenManager<R> *>(paintSteps["SSAO"].get()));
		screenManagers.push_back(dynamic_cast<ScreenManager<R> *>(paintSteps["Blur"].get()));
		screenManagers.push_back(
		    dynamic_cast<ScreenManager<R> *>(paintSteps["ScreenCapture"].get()));

		// TODO: absolutely not awesome performance wise, cool ease-of-use wise. Enhance!
		cellsMenu.onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				if (me->at("Colors").at("Normal").isChecked())
					r->currentColorMode = color_normal;
				else if (me->at("Colors").at("Pressure").isChecked())
					r->currentColorMode = color_pressure;

				if (me->at("Mesh type").at("Sphere").isChecked()) {
					paintStepsMethods[10] = [&](R *r) {
						CellGroup<R> *cells =
						    dynamic_cast<CellGroup<R> *>(paintSteps["SphereCells"].get());
						cells->call(r, false, r->currentColorMode);
					};
				} else if (me->at("Mesh type").at("Deformable mesh").isChecked()) {
					paintStepsMethods[10] = [&](R *r) {
						DeformableCellGroup<R> *cells = dynamic_cast<DeformableCellGroup<R> *>(
						    paintSteps["DeformableCells"].get());
						cells->call(r, r->currentColorMode);
					};
				} else if (me->at("Mesh type").at("Centers only").isChecked()) {
					paintStepsMethods[10] = [&](R *r) {
						CellGroup<R> *cells =
						    dynamic_cast<CellGroup<R> *>(paintSteps["SphereCells"].get());
						cells->call(r, true, r->currentColorMode);
					};
				} else {
					paintStepsMethods.erase(10);
				}
			} else {
				paintStepsMethods.erase(10);
			}
		};
		cellsMenu.at("Display connections").onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[17] = [&](R *r) {
					ConnectionsGroup<R> *connections =
					    dynamic_cast<ConnectionsGroup<R> *>(paintSteps["Connections"].get());
					connections->template draw<Cell>(
					    r->getScenario().getWorld().getConnectedCellsList(), r->getViewMatrix(),
					    r->getProjectionMatrix());
				};
			} else {
				paintStepsMethods.erase(17);
			}
		};
		cellsMenu.at("Display basis").onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[18] = [&](R *r) {
					const double lx = 15.0;
					const double ly = 15.0;
					ArrowsGroup<R> *arrows =
					    dynamic_cast<ArrowsGroup<R> *>(paintSteps["Arrows"].get());
					vector<std::pair<QVector3D, QQuaternion>> basis;
					basis.reserve(r->scenario.getWorld().cells.size());
					for (auto &c : r->scenario.getWorld().cells) {
						QQuaternion qq =
						    QQuaternion::fromAxisAndAngle(toQV3D(c->getOrientationRotation().n),
						                                  radToDeg(c->getOrientationRotation().teta));
						basis.push_back(make_pair(toQV3D(c->getPosition()), qq));
					}
					vector<pair<QVector3D, QVector3D>> f;
					for (auto &b : basis) {
						f.push_back(
						    make_pair(b.first, b.second.rotatedVector(QVector3D(1, 0, 0)) * lx));
					}
					arrows->call(r, f, QVector4D(1.0, 0.1, 0.3, 1.0));
					f.clear();
					for (auto &b : basis) {
						f.push_back(
						    make_pair(b.first, b.second.rotatedVector(QVector3D(0, 1, 0)) * lx));
					}
					arrows->call(r, f, QVector4D(0.1, 0.3, 1.0, 1.0));
				};
			} else {
				paintStepsMethods.erase(18);
			}
		};
		cellsMenu.at("Display forces").onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[15] = [&](R *r) {
					ArrowsGroup<R> *arrows =
					    dynamic_cast<ArrowsGroup<R> *>(paintSteps["Arrows"].get());
					auto f0 = r->scenario.getWorld().getAllForces();
					vector<pair<QVector3D, QVector3D>> f;
					f.reserve(f0.size());
					for (auto &p : f0) {
						f.push_back(make_pair(toQV3D(p.first), toQV3D(p.second)));
					}
					arrows->call(r, f, QVector4D(1.0, 0.3, 0.6, 1.0));
				};
			} else {
				paintStepsMethods.erase(15);
			}
		};
		MenuElement<R> ssaoPostproc = {"SSAO"};
		ssaoPostproc.onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[1000000] = [&](R *r) { paintSteps["SSAO"]->call(r); };
			} else {
				paintStepsMethods[1000000] = [&](R *r) {
					dynamic_cast<SSAO<R> *>(paintSteps["SSAO"].get())->callDumb(r);
				};
			}
		};
		MenuElement<R> menublurPostproc = {"Blurred menu"};
		menublurPostproc.onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[2000000] = [&](R *r) { paintSteps["Blur"]->call(r); };
			} else {
				paintStepsMethods.erase(2000000);
			}
		};
		MenuElement<R> screenCap = {"Screen capture", false};
		screenCap.onToggled = [&](R *r, MenuElement<R> *me) {
			if (me->isChecked()) {
				paintStepsMethods[1900000] = [&](R *r) { paintSteps["ScreenCapture"]->call(r); };
			} else {
				paintStepsMethods.erase(1900000);
			}
		};
		MenuElement<R> postProcMenu = {"Post processing",
		                               {ssaoPostproc, menublurPostproc, screenCap}};
		displayMenu = {"Rendered elements", {cellsMenu, postProcMenu}};
		for (auto &p : plugins_onLoad) p(this);
		displayMenu.print();
		displayMenu.callAll(this);
	}

	ColorMode currentColorMode = color_normal;
	void applyInterfaceAdditions(SignalSlotBase *b) {
		QObject *root = b->window();
		for (auto &b : buttons) {
			auto &bt = b.second;
			if (bt.needsToBeUpdated()) {
				QMetaObject::invokeMethod(root, "addButton", Q_ARG(QVariant, bt.getName()),
				                          Q_ARG(QVariant, bt.getMenu()),
				                          Q_ARG(QVariant, bt.getLabel()),
				                          Q_ARG(QVariant, bt.getColor()));
				bt.updateOK();
			}
		}
		if (displayMenuChanged) {
			QMetaObject::invokeMethod(root, "createDisplayMenu",
			                          Q_ARG(QVariant, displayMenu.toJSON()));
			displayMenuChanged = false;
		}
	}

	// called after every frame, thread safe
	// synchronization between Qt threads
	virtual void sync(SignalSlotBase *b) {
		applyInterfaceAdditions(b);

		// loop
		worldUpdate = b->worldUpdate;
		loopStep = b->loopStep;
		b->loopStep = false;

		guiCtrl = b->getGuiCtrl();

		// stats
		if (selectedCell)
			stats["selectedCell"] = cellToQVMap(selectedCell);
		else
			stats.remove("selectedCell");
		b->setStats(stats);
		b->statsChanged();

		// menu
		displayMenuToggled = b->displayMenuToggled;
		b->displayMenuToggled.clear();
		displayMenu.updateCheckedFromList(this, displayMenuToggled);
		if (displayMenuToggled.size() > 0) displayMenu.callAll(this);

		// mouse
		mouseClickedButtons = b->mouseClickedButtons;
		b->mouseClickedButtons &= Qt::NoButton;
		mouseDblClickedButtons = b->mouseDblClickedButtons;
		b->mouseDblClickedButtons &= Qt::NoButton;
		mousePrevPosition = mousePosition;
		mousePosition = b->lastMouseEvent.localPos();
		if (mouseClickedButtons > 0) {
			mousePrevPosition = mousePosition;
		}
		mousePressedButtons = b->lastMouseEvent.buttons();
		mouseWheel = b->mouseWheel;
		b->mouseWheel = 0;

		// keyboard
		keyPress = b->keyPress;
		keyDown = b->keyDown;
		b->keyPress.clear();
		processEvents(b);
		for (auto &p : plugins_postDraw) p(this);
	}

	/***********************************
	 *              EVENTS              *
	 ***********************************/
	// events handling routine
	void processEvents(SignalSlotBase *b) {
		const vector<Qt::MouseButton> acceptedButtons = {
		    {Qt::LeftButton, Qt::RightButton, Qt::MiddleButton}};
		// mouse drag (mouse down)
		for (auto &b : acceptedButtons) {
			if (mousePressedButtons.testFlag(b) && mouseDragMethods.count(b)) {
				mouseDragMethods[b](this);
			}
		}
		// mouse click
		for (auto &b : acceptedButtons) {
			if (mouseClickedButtons.testFlag(b) && mouseClickMethods.count(b)) {
				mouseClickMethods[b](this);
			}
		}
		// keyboard press (only once per key press)
		for (auto &k : keyPress) {
			if (keyPressMethods.count(k)) {
				keyPressMethods.at(k)(this);
			}
		}
		// keyboard down (key is down)
		for (auto &k : keyDown) {
			if (keyDownMethods.count(k)) {
				keyDownMethods.at(k)(this);
			}
		}
		// buttons
		for (auto &bName : b->clickedButtons) {
			if (buttons.count(bName)) {
				buttons[bName].clicked(this);
			}
		}
		b->clickedButtons.clear();
	}

	QVariantMap cellToQVMap(Cell *c) {
		QVariantMap res;
		if (c) {
			res["Radius"] = c->getBoundingBoxRadius();
			res["Volume"] = c->getVolume();
			res["Pressure"] = c->getPressure();
			res["Mass"] = c->getMass();
			res["Connections"] = c->getNbConnections();
		}
		return res;
	}

	/***************************************************
	 * ** ** ** ** *         PAINT       * ** ** ** ** *
	 **************************************************/
	virtual void paint() {
		viewMatrix = camera.getViewMatrix();
		projectionMatrix = camera.getProjectionMatrix((float)viewportSize.width() /
		                                              (float)viewportSize.height());
		updateScenario();
		// default paint Methods
		paintStepsMethods[0] = [&](R *r) { paintSteps["MSAA"]->call(r); };
		paintStepsMethods[5] = [&](R *r) { paintSteps["Skybox"]->call(r); };

		for (auto &p : plugins_preDraw) p(this);

		for (auto &s : paintStepsMethods) {
			s.second(this);
		}

		updateStats();
		if (window) {
			window->resetOpenGLState();
			window->update();
		}
	}

	void updateStats() {
		auto t1 = std::chrono::high_resolution_clock::now();
		std::chrono::duration<double> fpsDt = t1 - tfps;
		nbFramesSinceLastTick++;
		if (fpsDt.count() > fpsRefreshRate) {
			stats["fps"] = (double)nbFramesSinceLastTick / (double)fpsDt.count();
			nbFramesSinceLastTick = 0;
			tfps = chrono::high_resolution_clock::now();
		}
		stats["nbCells"] = QVariant((int)scenario.getWorld().cells.size());
		stats["nbUpdates"] = scenario.getWorld().getNbUpdates();
		if (window) {
			window->resetOpenGLState();
		}
		std::chrono::duration<double> dv = t1 - t0;
		viewDt = dv.count();
		t0 = std::chrono::high_resolution_clock::now();
		camera.updatePosition(viewDt);
		++frame;
	}

	// called on redimensioning events.
	void setViewportSize(const QSize &s) {
		viewportSize = s;
		screenScaleCoef = 1.0;  // window->devicePixelRatio();
		for (auto &sm : screenManagers) {
			sm->screenChanged(this);
		}
	}

	void updateScenario() {
		if (loopStep || worldUpdate) {
			for (auto &p : plugins_preLoop) p(this);
			for (int i = 0; i < nbLoopsPerFrame; ++i) scenario.loop();
			if (!selectedCellStillExists()) selectedCell = nullptr;
			loopStep = false;
		}
	}

 public:
	/**************************
	 *           SET
	 **************************/
	void setCurrentFBO(QOpenGLFramebufferObject *fbo) { currentFBO = fbo; }
	void setSelectedCell(Cell *c) { selectedCell = c; }
	void pause() {
		worldUpdate = false;
		loopStep = false;
	}
	void setNbLoopsPerFrame(int n) { nbLoopsPerFrame = n; }
	void play() { worldUpdate = true; }
	/**************************
	 *           GET
	 **************************/
	int getFrame() { return frame; }
	Scenario &getScenario() { return scenario; }
	const QMatrix4x4 &getViewMatrix() { return viewMatrix; }
	const QMatrix4x4 &getProjectionMatrix() { return projectionMatrix; }
	double getTimeSinceLastFrame() { return viewDt; }
	Camera &getCamera() { return camera; }
	Cell *getSelectedCell() { return selectedCell; }
	QSize getViewportSize() { return viewportSize; }
	QOpenGLFramebufferObject *getCurrentFBO() { return currentFBO; }
	float getScreenScaleCoef() { return screenScaleCoef; }
	unsigned long getCurrentFrame() { return currentFrameNumber; }
	bool isFullscreen() { return fullscreenMode; }
	unsigned long getLeftMenuSize() { return leftMenuSize; }
	bool selectedCellStillExists() {
		return (std::find(scenario.getWorld().cells.begin(), scenario.getWorld().cells.end(),
		                  selectedCell) != scenario.getWorld().cells.end());
	}
	MenuElement<R> *getDisplayMenu() { return &displayMenu; }
	void addPaintStepsMethods(int priority, Rfunc f) {
		paintStepsMethods[priority] = std::move(f);
	}
	void erasePaintStepsMethods(int priority) { paintStepsMethods.erase(priority); }

	/*************************
	 *    UI ADDITIONS
	 *************************/
	template <typename P> void registerPlugin(P &p) { loadPluginHooks(this, p); }
	void addKeyDownMethod(Qt::Key k, Rfunc f) { keyDownMethods[k] = f; }
	void addKeyPressMethod(Qt::Key k, Rfunc f) { keyPressMethods[k] = f; }
	void addMouseDragMethod(Qt::MouseButton b, Rfunc f) { mouseDragMethods[b] = f; }
	void addMouseClickMethod(Qt::MouseButton b, Rfunc f) { mouseClickMethods[b] = f; }
	QPointF getMousePosition() { return mousePosition; }
	QPointF getPreviousMousePosition() { return mousePrevPosition; }
	Button<R> *addButton(Button<R> b) {
		buttons[b.getName()] = b;
		return &buttons[b.getName()];
	}
	Button<R> *addButton(std::string name, std::string menu, std::string label,
	                     std::function<void(R *, Button<R> *)> onClicked) {
		Button<R> b(QString::fromStdString(name), QString::fromStdString(menu),
		            QString::fromStdString(label), onClicked);
		buttons[QString::fromStdString(name)] = b;
		return &buttons[b.getName()];
	}
	Button<R> *getButton(std::string name) {
		if (buttons.count(QString::fromStdString(name)))
			return &buttons[QString::fromStdString(name)];
		return nullptr;
	}
	QQuickWindow *getWindow() { return window; }

	QQuickWindow *view;
	QQmlApplicationEngine *engine;
	QQuickWindow *getMainView() { return view; }
	QQmlApplicationEngine *getEngine() { return engine; }
	int exec() {
		QGuiApplication app(argc, argv);
		app.setQuitOnLastWindowClosed(true);

		qmlRegisterType<SignalSlotBase>("SceneGraphRendering", 1, 0, "Renderer");
		engine = new QQmlApplicationEngine((QUrl("qrc:/main.qml")));

		QObject *root = engine->rootObjects().first();

		view = qobject_cast<QQuickWindow *>(root);
		view->setFlags(Qt::Window | Qt::CustomizeWindowHint | Qt::WindowMinMaxButtonsHint |
		               Qt::WindowTitleHint | Qt::WindowCloseButtonHint |
		               Qt::WindowFullscreenButtonHint);
		SignalSlotBase *ssb = root->findChild<SignalSlotBase *>("renderer");

		engine->rootContext()->setContextProperty("glview", ssb);
		ssb->init(this);
		view->show();
		for (auto &p : plugins_preLoad) p(this);
		QObject::connect(view, SIGNAL(closing(QQuickCloseEvent *)), &app, SLOT(quit()));
		return app.exec();
	}
};
}
#endif
